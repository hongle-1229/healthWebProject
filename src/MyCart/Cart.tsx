import { useEffect, useState } from "react";
import {
  Table,
  Button,
  InputNumber,
  Image,
  Popconfirm,
  Typography,
  Divider,
  message
} from "antd";
import axios from "axios";

const { Title } = Typography;

interface CartItem {
  CartItemID: number;
  NameFood: string;
  ImageFood: string;
  Price: number;
  Quantity: number;
}

export default function Cart() {
  const [cartItems, setCartItems] = useState<CartItem[]>([]);
  const userId = 1; // T·∫°m d√πng user c·ªë ƒë·ªãnh

  useEffect(() => {
    axios
      .get(`http://localhost:5000/api/cart/${userId}`)
      .then((res) => setCartItems(res.data))
      .catch(() => message.error("Kh√¥ng th·ªÉ t·∫£i gi·ªè h√†ng"));
  }, []);

  const updateQuantity = (cartItemId: number, quantity: number) => {
    axios
      .put("http://localhost:5000/api/cart/update", { cartItemId, quantity })
      .then(() => {
        message.success("‚úÖ C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng");
        setCartItems((prev) =>
          prev.map((item) =>
            item.CartItemID === cartItemId ? { ...item, Quantity: quantity } : item
          )
        );
      })
      .catch(() => message.error("‚ùå L·ªói khi c·∫≠p nh·∫≠t"));
  };

  const removeItem = (cartItemId: number) => {
    axios
      .delete("http://localhost:5000/api/cart/delete/", {
        data: {cartItemId},
      })
      .then(() => {
        message.success("üóëÔ∏è ƒê√£ xo√° s·∫£n ph·∫©m");
        setCartItems((prev) => prev.filter((item) => item.CartItemID !== cartItemId));
      })
      .catch(() => message.error("‚ùå Kh√¥ng th·ªÉ xo√° s·∫£n ph·∫©m"));
  };

  const columns = [
    {
      title: "S·∫£n ph·∫©m",
      dataIndex: "NameFood",
      key: "NameFood",
      render: (text: string, record: CartItem) => (
        <div style={{ display: "flex", alignItems: "center" }}>
          <Image
            src={record.ImageFood}
            width={60}
            height={60}
            style={{ marginRight: 12, objectFit: "cover", borderRadius: 6 }}
          />
          <span style={{ fontWeight: 500 }}>{text}</span>
        </div>
      ),
    },
    {
      title: "ƒê∆°n gi√°",
      dataIndex: "Price",
      key: "Price",
      render: (price: number) => price.toLocaleString() + "‚Ç´",
    },
    {
      title: "S·ªë l∆∞·ª£ng",
      dataIndex: "Quantity",
      key: "Quantity",
      render: (quantity: number, record: CartItem) => (
        <InputNumber
          min={1}
          value={quantity}
          onChange={(value) => updateQuantity(record.CartItemID, value!)}
        />
      ),
    },
    {
      title: "Th√†nh ti·ªÅn",
      key: "total",
      render: (_: unknown, record: CartItem) =>
        (record.Price * record.Quantity).toLocaleString() + "‚Ç´",
    },
    {
      title: "Xo√°",
      key: "action",
      render: (_: unknown, record: CartItem) => (
        <Popconfirm
          title="Xo√° s·∫£n ph·∫©m kh·ªèi gi·ªè?"
          onConfirm={() => removeItem(record.CartItemID)}
        >
          <Button danger>Xo√°</Button>
        </Popconfirm>
      ),
    },
  ];

  const total = cartItems.reduce(
    (sum, item) => sum + item.Price * item.Quantity,
    0
  );

  return (
    <div
      style={{
        maxWidth: 900,
        margin: "40px auto",
        background: "#fff",
        padding: 32,
        borderRadius: 8,
        boxShadow: "0 2px 12px rgba(0,0,0,0.08)",
      }}
    >
      <Title level={2}>üõí Gi·ªè h√†ng c·ªßa b·∫°n</Title>

      <Table
        columns={columns}
        dataSource={cartItems}
        pagination={false}
        rowKey="CartItemID"
        locale={{ emptyText: "Gi·ªè h√†ng ƒëang tr·ªëng" }}
      />

      <Divider />

      <div style={{ textAlign: "right", fontSize: 20 }}>
        <b>T·ªïng c·ªông: {total.toLocaleString()}‚Ç´</b>
      </div>

      <Button
        type="primary"
        size="large"
        style={{ float: "right", marginTop: 24 }}
        disabled={cartItems.length === 0}
      >
        Thanh to√°n
      </Button>

      <div style={{ clear: "both" }}></div>
    </div>
  );
}
